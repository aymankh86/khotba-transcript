{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mic","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","App","useState","isListening","setIsListening","note","setNote","useEffect","handleListen","start","onend","console","log","stop","onstart","onresult","event","a","transcript","Array","from","results","map","result","join","onerror","error","className","onClick","prevState","to","googleApiKey","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iPAOMA,EAAM,IADVC,OAAOC,mBAAqBD,OAAOE,yBAGrCH,EAAII,YAAa,EACjBJ,EAAIK,gBAAiB,EACrBL,EAAIM,KAAO,QAgFIC,MA7Ef,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEWF,mBAAS,MAFpB,mBAENG,EAFM,KAEAC,EAFA,KAKbC,qBAAU,WACRC,MACC,CAACL,IAEJ,IAAMK,EAAe,WACfL,GACFT,EAAIe,QACJf,EAAIgB,MAAQ,WACVC,QAAQC,IAAI,cACZlB,EAAIe,WAGNf,EAAImB,OACJnB,EAAIgB,MAAQ,WAChBJ,EAAQ,IACFK,QAAQC,IAAI,0BAGhBlB,EAAIoB,QAAU,WACZH,QAAQC,IAAI,YAGdlB,EAAIqB,SAAJ,uCAAe,WAAMC,GAAN,eAAAC,EAAA,sDACPC,EAAaC,MAAMC,KAAKJ,EAAMK,SACjCC,KAAI,SAAAC,GAAM,OAAIA,EAAO,MACrBD,KAAI,SAAAC,GAAM,OAAIA,EAAOL,cACrBM,KAAK,IACRb,QAAQC,IAAIM,GACZZ,EAAQY,GACRxB,EAAI+B,QAAU,SAAAT,GACZL,QAAQC,IAAII,EAAMU,QARP,2CAAf,uDAkBF,OACE,oCACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,iDACCxB,EAAc,oDAAmB,gEAIlC,4BAAQyB,QAAS,kBAAMxB,GAAe,SAAAyB,GAAS,OAAKA,OAC1D1B,EAAc,OAAS,SAGvB,kBAAC,IAAD,CACDiB,KAAK,KACLU,GAAG,KACHC,aAAa,2CAEL,2BAAI1B,EAAO,kBAAC,IAAD,KAAYA,GAAoB,SCjElC2B,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLf,QAAQe,MAAMA,EAAMsB,a","file":"static/js/main.a2d1125e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport {Translator, Translate} from 'react-auto-translate';\n\n\nconst SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition\nconst mic = new SpeechRecognition()\n\nmic.continuous = true\nmic.interimResults = true\nmic.lang = 'tr-TR'\n\n\nfunction App() {\n  const [isListening, setIsListening] = useState(false)\n  const [note, setNote] = useState(null)\n//   const [savedNotes, setSavedNotes] = useState([])\n\n  useEffect(() => {\n    handleListen()\n  }, [isListening])\n\n  const handleListen = () => {\n    if (isListening) {\n      mic.start()\n      mic.onend = () => {\n        console.log('continue..')\n        mic.start()\n      }\n    } else {\n      mic.stop()\n      mic.onend = () => {\n\t\tsetNote(\"\")\n        console.log('Stopped Mic on Click')\n      }\n    }\n    mic.onstart = () => {\n      console.log('Mics on')\n    }\n\n    mic.onresult = async event => {\n      const transcript = Array.from(event.results)\n        .map(result => result[0])\n        .map(result => result.transcript)\n        .join('')\n      console.log(transcript)\n      setNote(transcript)\n      mic.onerror = event => {\n        console.log(event.error)\n      }\n    }\n  }\n\n//   const handleSaveNote = () => {\n//     setSavedNotes([...savedNotes, note])\n//     setNote('')\n//   }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"box\">\n          <h2>Khotba Transcript</h2>\n          {isListening ? <span>🎙️</span> : <span>🛑🎙️</span>}\n          {/* <button onClick={handleSaveNote} disabled={!note}>\n            Save Note\n          </button> */}\n          <button onClick={() => setIsListening(prevState => !prevState)}>\n\t\t\t{isListening ? \"Stop\" : \"Start\"}\n            {/* Start/Stop */}\n          </button>\n\t\t  <Translator\n\t\t\tfrom='tr'\n\t\t\tto='ar'\n\t\t\tgoogleApiKey='AIzaSyCkQWpiWS4fpSe5Sr7M16EthdPpRwLdD_M'\n\t\t\t>\n          \t<p>{note ? <Translate>{note}</Translate> : \"\"}</p>\n\t\t\t</Translator>\n        </div>\n        {/* <div className=\"box\">\n          <h2>Notes</h2>\n          {savedNotes.map(n => (\n            <p key={n}>{n}</p>\n          ))}\n        </div> */}\n      </div>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}